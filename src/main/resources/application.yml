spring:
  kafka:
    streams:
      application-id: kafka-cg-aggregator-2
      bootstrap-servers: localhost:9092
      properties:
        allow.auto.create.topics: false
        auto.offset.reset: latest
        schema.registry.url: http://localhost:8081
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
        commit.interval.ms: 10000 # Frequency of commit every 10sec
#        statestore.cache.max.bytes: 10485760  # 10 MB cache
        state.dir: /tmp/kafka-streams # Directory location for state store
        num.stream.threads: 3 # Number of stream threads in the application
        connections.max.idle.ms: 900000 # Adjusted max idle time for streams connections
        reconnect.backoff.ms: 1000 # Time to wait before attempting reconnection after disconnection
        reconnect.backoff.max.ms: 10000 # Maximum time to wait before attempting reconnection
        max.poll.records: 500
#        max.request.size:
        buffered.records.per.partition: 500
        fetch.max.bytes: 10485760  # 10 MB, adjust as needed
        request.timeout.ms: 60000 # consumer will wait for 1 min
#    consumer:
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#      group-id: kafka-cg-aggregator-1 # Use a unique consumer group ID
#      auto-offset-reset: latest

schema:
  registry:
    url: http://localhost:8081
  specific:
    avro:
      reader: false

kafka:
  topic:
    input: json-input-topic

message:
  filter: "SHIVA_FILTER"

logging:
  level:
    org.apache.kafka.streams.processor.internals.ProcessorStateManager: DEBUG